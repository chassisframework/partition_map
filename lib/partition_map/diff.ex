defmodule PartitionMap.Diff do
  @moduledoc """
  A Diff indicates the changes between one partition map and another, as generated by PartitionMap.diff/2.

  The differences are presented by three pieces of information:

    `:added_ids`, the partition ids added in the second map.
    `:deleted_ids`, the partition ids deleted in the second map.
    `:hunks`, a list of Hunk structs, which indicate the sections of keyspace moved from one partition to another.
  """

  alias PartitionMap.Partition
  alias PartitionMap.Diff.Hunk

  defstruct [:hunks, :added_ids, :deleted_ids]

  @type bound :: IntervalMap.bound()

  @type t :: %__MODULE__{
    hunks: [Hunk.t()],
    added_ids: [PartitionMap.partition_id()],
    deleted_ids: [PartitionMap.partition_id()]
  }

  defmodule Hunk do
    @moduledoc """
    Describes a section of keyspace that's been moved from one partition map to another.
    """
    defstruct [:from_id, :to_id, :left, :right]

    @type bound :: IntervalMap.bound()

    @type t :: %__MODULE__{
      from_id: PartitionMap.partition_id(),
      to_id: PartitionMap.partition_id(),
      left: bound(),
      right: bound()
    }
  end

  #
  # This is O(n*m), could be refactored to lessen `m`.
  #
  @spec diff(PartitionMap.t, PartitionMap.t) :: t
  def diff(%PartitionMap{} = partition_map, %PartitionMap{} = other_partition_map) do
    from_partitions = PartitionMap.to_list(partition_map)
    to_partitions = PartitionMap.to_list(other_partition_map)

    hunks =
      Enum.flat_map(from_partitions, fn %Partition{id: from_id, left: from_left, right: from_right} = from_partition ->
        to_partitions
        |> Enum.filter(&Partition.overlap?(from_partition, &1))
        |> Enum.reject(fn %Partition{id: to_id} -> to_id == from_id end)
        |> Enum.map(fn %Partition{id: to_id, left: to_left, right: to_right} ->
          left = max(from_left, to_left)
          right = min(from_right, to_right)

          %Hunk{from_id: from_id, to_id: to_id, left: left, right: right}
        end)
      end)

    from_ids =
      from_partitions
      |> partition_ids()
      |> MapSet.new()

    to_ids =
      to_partitions
      |> partition_ids()
      |> MapSet.new()

    deleted_ids = MapSet.difference(from_ids, to_ids) |> MapSet.to_list()
    added_ids = MapSet.difference(to_ids, from_ids) |> MapSet.to_list()

    %__MODULE__{hunks: hunks, added_ids: added_ids, deleted_ids: deleted_ids}
  end

  defp partition_ids(partitions) when is_list(partitions) do
    Enum.map(partitions, fn %Partition{id: id} -> id end)
  end
end
